######################################################
# Men-At-Arms Manager - Scripted GUI Helpers
# 
# New workflow:
# 1. Select source MAA (top panel)
# 2. Select target MAA (bottom panel - becomes selectable list)
# 3. Adjust transfer amount (buttons appear in control panel)
# 4. Confirm or Reset (executes transfer or returns to step 2)
######################################################
######################################################
# Data Initialization
######################################################
maa_manager_data_create = {
	scope = character
	effect = {
		debug_log = "MAA Manager: Initializing data..."
		# Clear any previous data
		clear_variable_list = maa_regiment_list
		clear_variable_list = maa_move_target_list
		clear_saved_scope = maa_manager_selected_regiment
		save_scope_value_as = {
			name = maa_manager_selected_type
			value = flag:_maa_manager_unset
		}
		remove_global_variable = maa_manager_move_has_targets
		# Ensure we have the selected regiment scope variable
		if = {
			limit = {
				NOT = {
					has_variable = maa_manager_selected_regiment_scope
				}
			}
			set_variable = {
				name = maa_manager_selected_regiment_scope
				value = ROOT
			}
		}
		# Collect all MAA regiments
		every_maa_regiment = {
			ROOT = {
				add_to_variable_list = {
					name = maa_regiment_list
					target = prev
				}
			}
		}
		debug_log = "MAA Manager: Data initialization complete."
	}
}

######################################################
# Step 1: Select Source Regiment
######################################################
maa_manager_select_regiment = {
	scope = character
	effect = {
		debug_log = "MAA Manager: Selecting source regiment..."
		# Clear target selection and move targets when selecting new source
		clear_variable_list = maa_move_target_list
		remove_global_variable = maa_manager_move_has_targets
		# Clear target selection by removing the saved scope
		if = {
			limit = {
				has_variable = maa_manager_selected_target_scope
			}
			remove_variable = maa_manager_selected_target_scope
		}
		# Clear any planned transfers
		if = {
			limit = {
				has_variable = maa_total_planned_transfers
			}
			remove_variable = maa_total_planned_transfers
		}
		# Save the selected source regiment
		scope:regiment = {
			save_scope_as = maa_manager_selected_regiment
			# Calculate stack size for this MAA type (max_troops / num_stacks)
			save_temporary_scope_value_as = {
				name = regiment_max_troops
				value = maa_max_troops_count
			}
			save_temporary_scope_value_as = {
				name = regiment_num_stacks
				value = maa_size
			}
			save_temporary_scope_value_as = {
				name = regiment_stack_size
				value = {
					value = scope:regiment_max_troops
					divide = scope:regiment_num_stacks
				}
			}
			ROOT = {
				set_variable = {
					name = maa_manager_selected_regiment_scope
					value = scope:regiment
				}
				# Store stack size for GUI display and script use
				set_variable = {
					name = maa_stack_size
					value = scope:regiment_stack_size
				}
			}
			maa_manager_store_selected_type = yes
		}
		# Build the list of compatible target regiments
		every_maa_regiment = {
			if = {
				limit = {
					NOT = {
						this = scope:maa_manager_selected_regiment
					}
					maa_manager_type_matches_selection = yes
				}
				ROOT = {
					add_to_variable_list = {
						name = maa_move_target_list
						target = prev
					}
					set_global_variable = {
						name = maa_manager_move_has_targets
						value = yes
					}
				}
			}
		}
		debug_log = "MAA Manager: Source selected, targets built."
	}
}

######################################################
# Step 2: Select Target Regiment
######################################################
maa_manager_select_target = {
	scope = character
	is_shown = {
		always = yes
	}
	is_valid = {
		always = yes
	}
	effect = {
		debug_log = "MAA Manager: Selecting target regiment..."
		# Store the selected target regiment as a scope variable
		scope:target_regiment = {
			ROOT = {
				set_variable = {
					name = maa_manager_selected_target_scope
					value = scope:target_regiment
				}
			}
			# Calculate and store target TROOP capacity
			save_temporary_scope_value_as = {
				name = target_capacity
				value = {
					value = maa_max_troops_count
					subtract = maa_current_troops_count
				}
			}
			ROOT = {
				set_variable = {
					name = maa_target_capacity
					value = scope:target_capacity
				}
			}
			# Calculate and store target REGIMENT capacity (max stacks)
			save_temporary_scope_value_as = {
				name = target_regiment_capacity
				value = maa_size
			}
			ROOT = {
				set_variable = {
					name = maa_target_regiment_capacity
					value = scope:target_regiment_capacity
				}
			}
		}
		# Reset any existing transfer amounts when selecting a new target
		if = {
			limit = {
				has_variable = maa_total_planned_transfers
			}
			remove_variable = maa_total_planned_transfers
		}
		if = {
			limit = {
				has_variable = maa_total_planned_regiment_transfers
			}
			remove_variable = maa_total_planned_regiment_transfers
		}
		set_variable = {
			name = maa_total_planned_transfers
			value = 0
		}
		set_variable = {
			name = maa_total_planned_regiment_transfers
			value = 0
		}
		debug_log = "MAA Manager: Target selected, ready for amount adjustment."
	}
}

######################################################
# Step 3: Adjust Transfer Amount
######################################################
# Increase transfer by 100
maa_manager_increase_transfer = {
	scope = character
	is_shown = {
		always = yes
	}
	is_valid = {
		always = yes
	}
	effect = {
		debug_log = "MAA Manager: Increasing transfer amount..."
		# Initialize if needed
		if = {
			limit = {
				NOT = {
					has_variable = maa_total_planned_transfers
				}
			}
			set_variable = {
				name = maa_total_planned_transfers
				value = 0
			}
		}
		# Get available troops from source and recalculate stack size
		var:maa_manager_selected_regiment_scope = {
			save_temporary_scope_value_as = {
				name = source_current_troops
				value = maa_current_troops_count
			}
			# Recalculate stack size in case MAA size changed
			save_temporary_scope_value_as = {
				name = source_max_troops
				value = maa_max_troops_count
			}
			save_temporary_scope_value_as = {
				name = source_num_stacks
				value = maa_size
			}
			save_temporary_scope_value_as = {
				name = maa_stack_size
				value = {
					value = scope:source_max_troops
					divide = scope:source_num_stacks
				}
			}
			# Update stored stack size for GUI
			ROOT = {
				set_variable = {
					name = maa_stack_size
					value = scope:maa_stack_size
				}
			}
		}
		# Get target capacity (max - current size in troops)
		var:maa_manager_selected_target_scope = {
			save_temporary_scope_value_as = {
				name = target_max_size
				value = maa_max_troops_count
			}
			save_temporary_scope_value_as = {
				name = target_current_size
				value = maa_current_troops_count
			}
		}
		# Calculate target remaining capacity (considering already planned transfers)
		save_temporary_scope_value_as = {
			name = target_remaining_capacity
			value = {
				value = scope:target_max_size
				subtract = scope:target_current_size
				subtract = var:maa_total_planned_transfers				# Account for already planned transfers!
			}
		}
		# Store TOTAL target capacity for GUI display (not the remaining after planned)
		set_variable = {
			name = maa_target_capacity
			value = {
				value = scope:target_max_size
				subtract = scope:target_current_size
			}
		}
		# Calculate how much we can still transfer from source
		save_temporary_scope_value_as = {
			name = source_remaining_available
			value = {
				value = scope:source_current_troops
				subtract = var:maa_total_planned_transfers
			}
		}
		# The actual limit is the minimum of source available and target capacity
		save_temporary_scope_value_as = {
			name = transfer_limit
			value = scope:source_remaining_available
		}
		if = {
			limit = {
				scope:target_remaining_capacity < scope:transfer_limit
			}
			save_temporary_scope_value_as = {
				name = transfer_limit
				value = scope:target_remaining_capacity
			}
		}
		# Increase by stack_size or whatever is available (whichever is less)
		if = {
			limit = {
				scope:transfer_limit > 0
			}
			# Determine how much to actually add (use dynamic stack size)
			save_temporary_scope_value_as = {
				name = amount_to_add
				value = scope:maa_stack_size
			}
			if = {
				limit = {
					scope:transfer_limit < scope:maa_stack_size
				}
				save_temporary_scope_value_as = {
					name = amount_to_add
					value = scope:transfer_limit
				}
			}
			change_variable = {
				name = maa_total_planned_transfers
				add = scope:amount_to_add
			}
			debug_log = "MAA Manager: Increased transfer amount."
		}
		else = {
			debug_log = "MAA Manager: Cannot increase - no capacity available."
		}
	}
}

# Decrease transfer by 100
maa_manager_decrease_transfer = {
	scope = character
	is_shown = {
		always = yes
	}
	is_valid = {
		always = yes
	}
	effect = {
		debug_log = "MAA Manager: Decreasing transfer amount..."
		# Recalculate stack size in case MAA size changed
		var:maa_manager_selected_regiment_scope = {
			save_temporary_scope_value_as = {
				name = source_max_troops
				value = maa_max_troops_count
			}
			save_temporary_scope_value_as = {
				name = source_num_stacks
				value = maa_size
			}
			save_temporary_scope_value_as = {
				name = maa_stack_size
				value = {
					value = scope:source_max_troops
					divide = scope:source_num_stacks
				}
			}
			# Update stored stack size for GUI
			ROOT = {
				set_variable = {
					name = maa_stack_size
					value = scope:maa_stack_size
				}
			}
		}
		# Only decrease if we have something to decrease
		if = {
			limit = {
				has_variable = maa_total_planned_transfers
				var:maa_total_planned_transfers > 0
			}
			# Decrease by stack_size or whatever is currently planned (whichever is less)
			save_temporary_scope_value_as = {
				name = amount_to_subtract
				value = scope:maa_stack_size
			}
			if = {
				limit = {
					var:maa_total_planned_transfers < scope:maa_stack_size
				}
				save_temporary_scope_value_as = {
					name = amount_to_subtract
					value = var:maa_total_planned_transfers
				}
			}
			change_variable = {
				name = maa_total_planned_transfers
				subtract = scope:amount_to_subtract
			}
			debug_log = "MAA Manager: Decreased transfer amount."
		}
		else = {
			debug_log = "MAA Manager: Cannot decrease - nothing planned."
		}
	}
}

# Transfer all available troops
maa_manager_transfer_all = {
	scope = character
	is_shown = {
		always = yes
	}
	is_valid = {
		always = yes
	}
	effect = {
		debug_log = "MAA Manager: Setting transfer to ALL available..."
		# Get all available troops from source
		var:maa_manager_selected_regiment_scope = {
			save_temporary_scope_value_as = {
				name = source_all_troops
				value = maa_current_troops_count
			}
		}
		# Get target capacity
		var:maa_manager_selected_target_scope = {
			save_temporary_scope_value_as = {
				name = target_max_size
				value = maa_max_troops_count
			}
			save_temporary_scope_value_as = {
				name = target_current_size
				value = maa_current_troops_count
			}
		}
		# Calculate target remaining capacity
		save_temporary_scope_value_as = {
			name = target_remaining_capacity
			value = {
				value = scope:target_max_size
				subtract = scope:target_current_size
			}
		}
		# Store target capacity for GUI display
		set_variable = {
			name = maa_target_capacity
			value = scope:target_remaining_capacity
		}
		# Set planned transfer to minimum of source available and target capacity
		save_temporary_scope_value_as = {
			name = actual_transfer_amount
			value = scope:source_all_troops
		}
		if = {
			limit = {
				scope:target_remaining_capacity < scope:actual_transfer_amount
			}
			save_temporary_scope_value_as = {
				name = actual_transfer_amount
				value = scope:target_remaining_capacity
			}
		}
		set_variable = {
			name = maa_total_planned_transfers
			value = scope:actual_transfer_amount
		}
		debug_log = "MAA Manager: Set to transfer maximum allowed."
	}
}

######################################################
# Step 4: Confirm or Reset
######################################################
# Reset - Returns to target selection (step 2)
maa_manager_reset_transfers = {
	scope = character
	is_shown = {
		always = yes
	}
	is_valid = {
		always = yes
	}
	effect = {
		debug_log = "MAA Manager: Resetting transfers..."
		# Clear the troop transfer amount
		if = {
			limit = {
				has_variable = maa_total_planned_transfers
			}
			remove_variable = maa_total_planned_transfers
		}
		# Clear the regiment transfer amount
		if = {
			limit = {
				has_variable = maa_total_planned_regiment_transfers
			}
			remove_variable = maa_total_planned_regiment_transfers
		}
		set_variable = {
			name = maa_total_planned_transfers
			value = 0
		}
		set_variable = {
			name = maa_total_planned_regiment_transfers
			value = 0
		}
		# Clear target selection - returns to step 2
		if = {
			limit = {
				has_variable = maa_manager_selected_target_scope
			}
			remove_variable = maa_manager_selected_target_scope
		}
		debug_log = "MAA Manager: Reset complete, returned to target selection."
	}
}

# Confirm - Executes BOTH troop and regiment transfers
maa_manager_confirm_transfers = {
	scope = character
	is_shown = {
		always = yes
	}
	is_valid = {
		always = yes
	}
	effect = {
		debug_log = "MAA Manager: Confirming transfers..."
		# Execute TROOP transfer if valid
		if = {
			limit = {
				has_variable = maa_manager_selected_regiment_scope
				has_variable = maa_manager_selected_target_scope
				has_variable = maa_total_planned_transfers
				var:maa_total_planned_transfers > 0
			}
			debug_log = "MAA Manager: Executing troop transfer..."
			save_temporary_scope_value_as = {
				name = troop_transfer_amount
				value = var:maa_total_planned_transfers
			}
			# Execute the troop transfer
			var:maa_manager_selected_regiment_scope = {
				change_maa_troops_count = {
					value = scope:troop_transfer_amount
					multiply = -1
				}
			}
			var:maa_manager_selected_target_scope = {
				change_maa_troops_count = scope:troop_transfer_amount
			}
			debug_log = "MAA Manager: Troop transfer executed!"
		}
		# Execute REGIMENT transfer if valid
		if = {
			limit = {
				has_variable = maa_manager_selected_regiment_scope
				has_variable = maa_manager_selected_target_scope
				has_variable = maa_total_planned_regiment_transfers
				var:maa_total_planned_regiment_transfers > 0
			}
			debug_log = "MAA Manager: Executing regiment transfer..."
			save_temporary_scope_value_as = {
				name = regiment_transfer_amount
				value = var:maa_total_planned_regiment_transfers
			}
			# Check if source will be depleted
			save_temporary_scope_value_as = {
				name = source_remaining
				value = {
					value = var:maa_manager_selected_regiment_scope.maa_size
					subtract = scope:regiment_transfer_amount
				}
			}
			# Execute the regiment transfer on source
			var:maa_manager_selected_regiment_scope = {
				if = {
					limit = {
						scope:source_remaining <= 0
					}
					# Destroy source regiment if depleted
					destroy_maa_regiment = yes
					debug_log = "MAA Manager: Source regiment destroyed (no stacks remaining)"
				}
				else = {
					# Reduce source regiment stacks
					# Note: negative value to subtract
					save_temporary_scope_value_as = {
						name = negative_amount
						value = {
							value = scope:regiment_transfer_amount
							multiply = -1
						}
					}
					change_maa_regiment_size = {
						size = scope:negative_amount
						reinforce = no
					}
					debug_log = "MAA Manager: Reduced source regiment by [scope:regiment_transfer_amount] stacks"
				}
			}
			# Increase target regiment stacks
			var:maa_manager_selected_target_scope = {
				change_maa_regiment_size = {
					size = scope:regiment_transfer_amount
					reinforce = no
				}
				debug_log = "MAA Manager: Increased target regiment by [scope:regiment_transfer_amount] stacks"
			}
			debug_log = "MAA Manager: Regiment transfer executed!"
		}
		# Clear all data after successful transfers
		if = {
			limit = {
				has_variable = maa_total_planned_transfers
			}
			remove_variable = maa_total_planned_transfers
		}
		if = {
			limit = {
				has_variable = maa_total_planned_regiment_transfers
			}
			remove_variable = maa_total_planned_regiment_transfers
		}
		if = {
			limit = {
				has_variable = maa_manager_selected_target_scope
			}
			remove_variable = maa_manager_selected_target_scope
		}
		# Refresh data to show new state
		maa_manager_data_create_effect = yes
		# Reselect the source regiment if it still exists
		if = {
			limit = {
				has_variable = maa_manager_selected_regiment_scope
			}
			var:maa_manager_selected_regiment_scope = {
				if = {
					limit = {
						maa_current_troops_count > 0
					}
					save_temporary_scope_as = regiment
					ROOT = {
						maa_manager_select_regiment_effect = yes
					}
				}
			}
		}
		debug_log = "MAA Manager: All transfers confirmed and complete."
	}
}

######################################################
# IMMEDIATE REGIMENT STACK TRANSFERS
# These execute instantly without confirmation
######################################################
######################################################
# Transfer 1 Regiment FROM Source TO Target (immediate) - Internal Effect
######################################################
maa_manager_transfer_regiment_to_target_effect = {
	scope = character
	effect = {
		debug_log = "MAA Manager: Transferring 1 regiment from source to target..."
		# Validate we have both regiments selected
		if = {
			limit = {
				has_variable = maa_manager_selected_regiment_scope
				has_variable = maa_manager_selected_target_scope
			}
			# Check if target can accept more stacks
			var:maa_manager_selected_target_scope = {
				if = {
					limit = {
						can_upgrade_maa = yes
					}
					# Target can accept, now check source
					ROOT.var:maa_manager_selected_regiment_scope = {
						if = {
							limit = {
								maa_size > 1
							}
							# Source has more than 1 stack, proceed with transfer
							# Greedy approach: Transfer full stack size (max soldiers per stack)
							ROOT = {
								set_variable = {
									name = temp_source_max
									value = prev.maa_max_troops_count
								}
								set_variable = {
									name = temp_source_current
									value = prev.maa_current_troops_count
								}
								set_variable = {
									name = temp_source_stacks
									value = prev.maa_size
								}
								set_variable = {
									name = temp_full_stack_size
									value = var:temp_source_max
								}
								change_variable = {
									name = temp_full_stack_size
									divide = var:temp_source_stacks
								}
								debug_log = "MAA Manager: Source regiment transfer starting (greedy full stack approach)"
								# Calculate how many soldiers to actually transfer (full stack or what's available)
								set_variable = {
									name = temp_soldiers_to_transfer
									value = var:temp_full_stack_size
								}
								# If we don't have enough soldiers for a full stack, transfer what we have
								if = {
									limit = {
										var:temp_source_current < var:temp_full_stack_size
									}
									set_variable = {
										name = temp_soldiers_to_transfer
										value = var:temp_source_current
									}
								}
								debug_log = "MAA Manager: Calculated transfer amount"
							}
							# Remove soldiers from source (using ROOT's variable, make it negative)
							ROOT = {
								set_variable = {
									name = temp_negative_soldiers
									value = {
										value = var:temp_soldiers_to_transfer
										multiply = -1
									}
								}
							}
							change_maa_troops_count = ROOT.var:temp_negative_soldiers
							debug_log = "MAA Manager: Removed soldiers from source"							# Remove 1 stack from source
							change_maa_regiment_size = {
								size = -1
								reinforce = no
							}
							debug_log = "MAA Manager: Removed 1 stack from source"
							# Add to target: increase size FIRST to expand capacity
							ROOT.var:maa_manager_selected_target_scope = {
								# Add 1 stack to target FIRST (to expand max capacity)
								change_maa_regiment_size = {
									size = 1
									reinforce = no
								}
								debug_log = "MAA Manager: Added 1 stack to target (expanded capacity)"
								# Then add soldiers (now there's room for them)
								change_maa_troops_count = ROOT.var:temp_soldiers_to_transfer
								debug_log = "MAA Manager: Added soldiers to target"
							}
							ROOT = {
								# Clean up temp variables
								remove_variable = temp_source_max
								remove_variable = temp_source_current
								remove_variable = temp_source_stacks
								remove_variable = temp_full_stack_size
								remove_variable = temp_soldiers_to_transfer
								remove_variable = temp_negative_soldiers
								debug_log = "MAA Manager: Successfully transferred 1 regiment stack with soldiers"
							}
						}
						else_if = {
							limit = {
								maa_size = 1
							}
							# Source has exactly 1 stack - transfer and destroy
							# (User already confirmed by clicking the warning button in GUI)
							# IMPORTANT: Must do everything in ROOT scope before destroying
							# Save soldier count before destroying
							save_temporary_scope_value_as = {
								name = final_soldiers
								value = maa_current_troops_count
							}
							ROOT = {
								var:maa_manager_selected_target_scope = {
									change_maa_regiment_size = {
										size = 1
										reinforce = no
									}
									change_maa_troops_count = scope:final_soldiers
									debug_log = "MAA Manager: Added final stack and all soldiers to target"
								}
								var:maa_manager_selected_regiment_scope = {
									destroy_maa_regiment = yes
									# Regiment is now destroyed, don't access it anymore
								}
								debug_log = "MAA Manager: Destroyed source regiment (was last stack)"
								# Clear source selection since it no longer exists
								remove_variable = maa_manager_selected_regiment_scope
								maa_manager_data_create_effect = yes
							}
						}
					}
				}
				else = {
					debug_log = "MAA Manager: Target cannot accept more stacks (can_upgrade_maa = no)"
				}
			}
		}
		else = {
			debug_log = "MAA Manager: Missing source or target regiment"
		}
	}
}

######################################################
# Transfer 1 Regiment FROM Target TO Source (immediate) - Internal Effect
######################################################
maa_manager_transfer_regiment_from_target_effect = {
	scope = character
	effect = {
		debug_log = "MAA Manager: Transferring 1 regiment from target to source..."
		# Validate we have both regiments selected
		if = {
			limit = {
				has_variable = maa_manager_selected_regiment_scope
				has_variable = maa_manager_selected_target_scope
			}
			# Check if source can accept more stacks
			var:maa_manager_selected_regiment_scope = {
				if = {
					limit = {
						can_upgrade_maa = yes
					}
					# Source can accept, now check target
					ROOT.var:maa_manager_selected_target_scope = {
						if = {
							limit = {
								maa_size > 1
							}
							# Target has more than 1 stack, proceed with transfer
							# Greedy approach: Transfer full stack size (max soldiers per stack)
							ROOT = {
								set_variable = {
									name = temp_target_max
									value = prev.maa_max_troops_count
								}
								set_variable = {
									name = temp_target_current
									value = prev.maa_current_troops_count
								}
								set_variable = {
									name = temp_target_stacks
									value = prev.maa_size
								}
								set_variable = {
									name = temp_full_stack_size
									value = var:temp_target_max
								}
								change_variable = {
									name = temp_full_stack_size
									divide = var:temp_target_stacks
								}
								debug_log = "MAA Manager: Target regiment transfer starting (greedy full stack approach)"
								# Calculate how many soldiers to actually transfer (full stack or what's available)
								set_variable = {
									name = temp_soldiers_to_transfer
									value = var:temp_full_stack_size
								}
								# If we don't have enough soldiers for a full stack, transfer what we have
								if = {
									limit = {
										var:temp_target_current < var:temp_full_stack_size
									}
									set_variable = {
										name = temp_soldiers_to_transfer
										value = var:temp_target_current
									}
								}
								debug_log = "MAA Manager: Calculated transfer amount"
							}
							# Remove soldiers from target (using ROOT's variable, make it negative)
							ROOT = {
								set_variable = {
									name = temp_negative_soldiers
									value = {
										value = var:temp_soldiers_to_transfer
										multiply = -1
									}
								}
							}
							change_maa_troops_count = ROOT.var:temp_negative_soldiers
							debug_log = "MAA Manager: Removed soldiers from target"
							# Remove 1 stack from target
							change_maa_regiment_size = {
								size = -1
								reinforce = no
							}
							debug_log = "MAA Manager: Removed 1 stack from target"
							# Add to source: increase size FIRST to expand capacity
							ROOT.var:maa_manager_selected_regiment_scope = {
								# Add 1 stack to source FIRST (to expand max capacity)
								change_maa_regiment_size = {
									size = 1
									reinforce = no
								}
								debug_log = "MAA Manager: Added 1 stack to source (expanded capacity)"
								# Then add soldiers (now there's room for them)
								change_maa_troops_count = ROOT.var:temp_soldiers_to_transfer
								debug_log = "MAA Manager: Added soldiers to source"
							}
							ROOT = {
								# Clean up temp variables
								remove_variable = temp_target_max
								remove_variable = temp_target_current
								remove_variable = temp_target_stacks
								remove_variable = temp_full_stack_size
								remove_variable = temp_soldiers_to_transfer
								remove_variable = temp_negative_soldiers
								debug_log = "MAA Manager: Successfully transferred 1 regiment stack back with soldiers"
							}
						}
						else_if = {
							limit = {
								maa_size = 1
							}
							# Target has exactly 1 stack - transfer and destroy
							# (User already confirmed by clicking the warning button in GUI)
							# IMPORTANT: Must do everything in ROOT scope before destroying
							# Save soldier count before destroying
							save_temporary_scope_value_as = {
								name = final_soldiers
								value = maa_current_troops_count
							}
							ROOT = {
								var:maa_manager_selected_regiment_scope = {
									change_maa_regiment_size = {
										size = 1
										reinforce = no
									}
									change_maa_troops_count = scope:final_soldiers
									debug_log = "MAA Manager: Added final stack and all soldiers to source"
								}
								var:maa_manager_selected_target_scope = {
									destroy_maa_regiment = yes
									# Regiment is now destroyed, don't access it anymore
								}
								debug_log = "MAA Manager: Destroyed target regiment (was last stack)"
								# Clear target selection since it no longer exists
								remove_variable = maa_manager_selected_target_scope
								maa_manager_data_create_effect = yes
							}
						}
					}
				}
				else = {
					debug_log = "MAA Manager: Source cannot accept more stacks (can_upgrade_maa = no)"
				}
			}
		}
		else = {
			debug_log = "MAA Manager: Missing source or target regiment"
		}
	}
}

######################################################
# Retrain Regiment
######################################################
maa_manager_execute_retrain = {
	scope = character
	is_shown = {
		has_variable = maa_manager_selected_regiment_scope
		has_variable = maa_manager_retrain_target_type
	}
	is_valid = {
		has_variable = maa_manager_selected_regiment_scope
		has_variable = maa_manager_retrain_target_type
	}
	effect = {
		debug_log = "MAA Manager: Executing retrain..."
		# Save the source regiment and capture its size
		var:maa_manager_selected_regiment_scope = {
			save_scope_as = source_regiment
		}

		# Store source size in local variable (survives regiment destruction)
		set_local_variable = {
			name = temp_retrain_size
			value = scope:source_regiment.maa_size
		}

		# Destroy the old regiment FIRST (prevents random_maa_regiment confusion)
		scope:source_regiment = {
			destroy_maa_regiment = yes
		}

		# Create new regiment with msize=1 add stacks with loop later
		root = {
			create_maa_regiment = {
				type_of = var:maa_manager_retrain_target_type
				check_can_recruit = no
				size = 0
			}
		}
		
		# init loop counter
		set_local_variable = {
			name = current_value
			value = 0
		}

		# find the newly created regiment and save it
		every_maa_regiment = {
			if = {
				limit = {
					maa_size = 0
				}
				save_scope_as = new_regiment
			}
		}

		# create the number of stacks with loop
		while = {
			limit = {
				local_var:current_value < local_var:temp_retrain_size
			}

			scope:new_regiment = {
				change_maa_regiment_size = {
					size = 1
					reinforce = yes
				}
			}

			# inc the counter
			change_local_variable = {
				name = current_value
				add = 1
			}
		}

		# Clear variables
		remove_variable = maa_manager_selected_regiment_scope
		remove_variable = maa_manager_retrain_target_type

		# Refresh data
		maa_manager_data_create_effect = yes
	}
}
